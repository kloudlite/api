package main

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/graphql-go/graphql"
)

func GenerateGraphQLSchema(data interface{}) (string, error) {
	m := map[string][]string{}

	generateGraphQLObject(data, "Query", m)

	// schemaConfig := graphql.SchemaConfig{
	// 	Query: generateGraphQLObject(data, "Query", m),
	// }

	b, err := json.Marshal(m)
	if err != nil {
		return "", err
	}

	fmt.Printf("%s\n", b)

	// schema, err := graphql.NewSchema(schemaConfig)
	// if err != nil {
	// 	return "", err
	// }
	//
	// d, _ := parser.Parse(parser.ParseParams{Source: schema.Type("Query")})
	//
	// x := printer.Print(d)
	// b, _ := json.Marshal(x)
	// fmt.Printf("%s\n", b)
	//
	return "", nil
}

var typeMap = map[reflect.Kind]string{
	reflect.Int:   "Int",
	reflect.Int8:  "Int",
	reflect.Int16: "Int",
	reflect.Int32: "Int",
	reflect.Int64: "Int",

	reflect.Float32: "Float",
	reflect.Float64: "Float",

	reflect.Bool:   "Boolean",
	reflect.String: "String",

	// reflect.Slice:  "[]",
	// reflect.Struct: "Object",
	// reflect.Map:    "Object",
}

func generateGraphQLObject(data interface{}, name string, dataMap map[string][]string) *graphql.Object {
	t := reflect.TypeOf(data)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}

	fields := []string{}

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		fieldName := field.Tag.Get(string([]byte("json")))
		if fieldName == "" {
			fieldName = field.Name
		}

		fieldType := ""
		switch v := field.Type.Kind(); v {
		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
			fieldType = "Int"
		case reflect.Float32, reflect.Float64:
			fieldType = "Float"
		case reflect.Bool:
			fieldType = "Boolean"
		case reflect.String:
			fieldType = "String"
		case reflect.Slice:
			fieldType = fmt.Sprintf("[%s]", typeMap[field.Type.Elem().Kind()])
		case reflect.Struct:
			fieldType = field.Type.Name()
			generateGraphQLObject(field.Type, fieldName, dataMap)
		}

		fields = append(fields, fmt.Sprintf("%s: %s", fieldName, fieldType))
	}

	dataMap[name] = fields

	// schemaDefinition := fmt.Sprintf("type Query { %s }", strings.Join(fields, " "))
	// fmt.Println(schemaDefinition)
	//
	return nil
}

type Sample struct {
	ID int `json:"id"`
}

type Person struct {
	ID      int      `json:"id"`
	Name    string   `json:"name"`
	Age     int      `json:"age"`
	Address []string `json:"address"`
	Email   string   `json:"email"`
	Sample  Sample   `json:"sample"`
}

func main() {
	person := Person{}

	GenerateGraphQLSchema(person)
	// if err != nil {
	// 	fmt.Printf("Failed to generate GraphQL schema: %v", err)
	// 	return
	// }
	//
	// // Save the schema to a .gqls file
	// file, err := os.Create("schema.gqls")
	// if err != nil {
	// 	fmt.Printf("Failed to create schema file: %v", err)
	// 	return
	// }
	// defer file.Close()
	//
	// _, err = file.WriteString(schema)
	// if err != nil {
	// 	fmt.Printf("Failed to write schema to file: %v", err)
	// 	return
	// }
	//
	// fmt.Println("GraphQL schema saved to schema.gqls")
}
