// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/kloudlite/api/apps/accounts/internal/entities"
	"github.com/kloudlite/api/apps/iam/types"
	"github.com/kloudlite/api/pkg/repos"
)

type AccountMembershipIn struct {
	AccountName string     `json:"accountName"`
	Role        types.Role `json:"role"`
	UserID      string     `json:"userId"`
}

type AvailableKloudliteRegionIn struct {
	DisplayName string `json:"displayName"`
	ID          string `json:"id"`
}

type Mutation struct {
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     *bool   `json:"hasNextPage,omitempty"`
	HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
	StartCursor     *string `json:"startCursor,omitempty"`
}

type Query struct {
}

type User struct {
	ID                 repos.ID                      `json:"id"`
	Accounts           []*entities.AccountMembership `json:"accounts,omitempty"`
	AccountInvitations []*entities.Invitation        `json:"accountInvitations,omitempty"`
}

func (User) IsEntity() {}

type GithubComKloudliteAPIAppsIamTypesAccountType string

const (
	GithubComKloudliteAPIAppsIamTypesAccountTypeFree    GithubComKloudliteAPIAppsIamTypesAccountType = "free"
	GithubComKloudliteAPIAppsIamTypesAccountTypePremium GithubComKloudliteAPIAppsIamTypesAccountType = "premium"
)

var AllGithubComKloudliteAPIAppsIamTypesAccountType = []GithubComKloudliteAPIAppsIamTypesAccountType{
	GithubComKloudliteAPIAppsIamTypesAccountTypeFree,
	GithubComKloudliteAPIAppsIamTypesAccountTypePremium,
}

func (e GithubComKloudliteAPIAppsIamTypesAccountType) IsValid() bool {
	switch e {
	case GithubComKloudliteAPIAppsIamTypesAccountTypeFree, GithubComKloudliteAPIAppsIamTypesAccountTypePremium:
		return true
	}
	return false
}

func (e GithubComKloudliteAPIAppsIamTypesAccountType) String() string {
	return string(e)
}

func (e *GithubComKloudliteAPIAppsIamTypesAccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteAPIAppsIamTypesAccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___api___apps___iam___types__AccountType", str)
	}
	return nil
}

func (e GithubComKloudliteAPIAppsIamTypesAccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
