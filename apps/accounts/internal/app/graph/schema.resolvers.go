package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"

	"kloudlite.io/apps/accounts/internal/app/graph/generated"
	"kloudlite.io/apps/accounts/internal/app/graph/model"
	"kloudlite.io/apps/accounts/internal/domain"
	"kloudlite.io/apps/accounts/internal/entities"
	"kloudlite.io/pkg/repos"
)

// AccountsCreateAccount is the resolver for the accounts_createAccount field.
func (r *mutationResolver) AccountsCreateAccount(ctx context.Context, account entities.Account) (*entities.Account, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return nil, err
	}
	return r.domain.CreateAccount(uc, account)
}

// AccountsUpdateAccount is the resolver for the accounts_updateAccount field.
func (r *mutationResolver) AccountsUpdateAccount(ctx context.Context, account entities.Account) (*entities.Account, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return nil, err
	}
	return r.domain.UpdateAccount(uc, account)
}

// AccountsRemoveAccountMember is the resolver for the accounts_removeAccountMember field.
func (r *mutationResolver) AccountsRemoveAccountMember(ctx context.Context, accountName string, memberID repos.ID) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsRemoveAccountMember - accounts_removeAccountMember"))
}

// AccountsUpdateAccountMember is the resolver for the accounts_updateAccountMember field.
func (r *mutationResolver) AccountsUpdateAccountMember(ctx context.Context, accountName string, memberID repos.ID, role string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsUpdateAccountMember - accounts_updateAccountMember"))
}

// AccountsDeactivateAccount is the resolver for the accounts_deactivateAccount field.
func (r *mutationResolver) AccountsDeactivateAccount(ctx context.Context, accountName string) (bool, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return false, err
	}
	return r.domain.DeactivateAccount(uc, accountName)
}

// AccountsActivateAccount is the resolver for the accounts_activateAccount field.
func (r *mutationResolver) AccountsActivateAccount(ctx context.Context, accountName string) (bool, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return false, err
	}
	return r.domain.ActivateAccount(uc, accountName)
}

// AccountsDeleteAccount is the resolver for the accounts_deleteAccount field.
func (r *mutationResolver) AccountsDeleteAccount(ctx context.Context, accountName string) (bool, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return false, err
	}
	return r.domain.DeactivateAccount(uc, accountName)
}

// AccountsInviteUser is the resolver for the accounts_inviteUser field.
func (r *mutationResolver) AccountsInviteUser(ctx context.Context, invitation *entities.Invitation) (*entities.Invitation, error) {
	panic(fmt.Errorf("not implemented: AccountsInviteUser - accounts_inviteUser"))
}

// AccountsDeleteInvitation is the resolver for the accounts_deleteInvitation field.
func (r *mutationResolver) AccountsDeleteInvitation(ctx context.Context, invitationID string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsDeleteInvitation - accounts_deleteInvitation"))
}

// AccountsListAccounts is the resolver for the accounts_listAccounts field.
func (r *queryResolver) AccountsListAccounts(ctx context.Context) ([]*entities.Account, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return nil, err
	}

	a, err := r.domain.ListAccounts(uc)
	if err != nil {
		return nil, err
	}
	if a == nil {
		return []*entities.Account{}, nil
	}
	return a, nil
}

// AccountsGetAccount is the resolver for the accounts_getAccount field.
func (r *queryResolver) AccountsGetAccount(ctx context.Context, accountName string) (*entities.Account, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.domain.GetAccount(uc, accountName)
}

// AccountsResyncAccount is the resolver for the accounts_resyncAccount field.
func (r *queryResolver) AccountsResyncAccount(ctx context.Context, accountName string) (bool, error) {
	uc, err := toUserContext(ctx)
	if err != nil {
		return false, err
	}

	if err := r.domain.ResyncAccount(uc, accountName); err != nil {
		return false, err
	}
	return true, nil
}

// AccountsListInvitations is the resolver for the accounts_listInvitations field.
func (r *queryResolver) AccountsListInvitations(ctx context.Context, accountName string) ([]*entities.Invitation, error) {
	panic(fmt.Errorf("not implemented: AccountsListInvitations - accounts_listInvitations"))
}

// AccountsGetInvitation is the resolver for the accounts_getInvitation field.
func (r *queryResolver) AccountsGetInvitation(ctx context.Context, accountName string, invitationID string) (*entities.Invitation, error) {
	panic(fmt.Errorf("not implemented: AccountsGetInvitation - accounts_getInvitation"))
}

// AccountsCheckNameAvailability is the resolver for the accounts_checkNameAvailability field.
func (r *queryResolver) AccountsCheckNameAvailability(ctx context.Context, name string) (*domain.CheckNameAvailabilityOutput, error) {
	return r.domain.CheckNameAvailability(ctx, name)
}

// AccountMemberships is the resolver for the accountMemberships field.
func (r *userResolver) AccountMemberships(ctx context.Context, obj *model.User) ([]*entities.AccountMembership, error) {
	panic(fmt.Errorf("not implemented: AccountMemberships - accountMemberships"))
}

// AccountMembership is the resolver for the accountMembership field.
func (r *userResolver) AccountMembership(ctx context.Context, obj *model.User, accountName string) (*entities.AccountMembership, error) {
	panic(fmt.Errorf("not implemented: AccountMembership - accountMembership"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
