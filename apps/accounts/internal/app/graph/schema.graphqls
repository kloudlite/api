directive @isLoggedInAndVerified on FIELD_DEFINITION
directive @hasAccount on FIELD_DEFINITION

type AccountsCheckNameAvailabilityOutput @shareable {
  result: Boolean!
  suggestedNames: [String!]
}

type Query {
  accounts_listAccounts: [Account] @isLoggedInAndVerified
  accounts_getAccount(accountName: String!): Account @isLoggedInAndVerified
  accounts_resyncAccount(accountName: String!): Boolean! @isLoggedInAndVerified

  accounts_listInvitations(accountName: String!): [Invitation!] @isLoggedInAndVerified
  accounts_getInvitation(accountName: String!, invitationId: String!): Invitation @isLoggedInAndVerified

  accounts_checkNameAvailability(name: String!): AccountsCheckNameAvailabilityOutput! @isLoggedInAndVerified
}

type Mutation {
  accounts_createAccount(account: AccountIn!): Account! @isLoggedInAndVerified
  accounts_updateAccount(account: AccountIn!): Account! @isLoggedInAndVerified

  accounts_removeAccountMember(accountName: String!, memberId: ID!): Boolean! @isLoggedInAndVerified
  accounts_updateAccountMember(accountName: String!, memberId: ID!, role: String!): Boolean! @isLoggedInAndVerified

  accounts_deactivateAccount(accountName: String!): Boolean! @isLoggedInAndVerified
  accounts_activateAccount(accountName: String!): Boolean! @isLoggedInAndVerified

  accounts_deleteAccount(accountName: String!): Boolean! @isLoggedInAndVerified
  # accounts_attachToCluster(accountId: ID!, clusterId: ID!): Boolean!


  # invitations
  accounts_inviteUser(invitation: InvitationIn): Invitation @isLoggedInAndVerified @hasAccount
  accounts_deleteInvitation(invitationId: String!): Boolean! @isLoggedInAndVerified @hasAccount
}

extend type User @key(fields: "id") {
  id: ID! @external
  accountMemberships:[AccountMembership!]! @isLoggedInAndVerified # user-access 
  accountMembership(accountName: String!):AccountMembership! @isLoggedInAndVerified # user-access
}
