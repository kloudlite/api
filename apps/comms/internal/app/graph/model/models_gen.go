// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/kloudlite/api/apps/comms/types"
)

type GithubComKloudliteAPIAppsCommsInternalDomainEntitiesEmailConfig struct {
	Enabled     bool   `json:"enabled"`
	MailAddress string `json:"mailAddress"`
}

type GithubComKloudliteAPIAppsCommsInternalDomainEntitiesEmailConfigIn struct {
	Enabled     bool   `json:"enabled"`
	MailAddress string `json:"mailAddress"`
}

type GithubComKloudliteAPIAppsCommsInternalDomainEntitiesSlackConfig struct {
	Enabled bool   `json:"enabled"`
	Webhook string `json:"webhook"`
}

type GithubComKloudliteAPIAppsCommsInternalDomainEntitiesSlackConfigIn struct {
	Enabled bool   `json:"enabled"`
	Webhook string `json:"webhook"`
}

type GithubComKloudliteAPIAppsCommsInternalDomainEntitiesTelegramConfig struct {
	Enabled bool `json:"enabled"`
}

type GithubComKloudliteAPIAppsCommsInternalDomainEntitiesTelegramConfigIn struct {
	Enabled bool `json:"enabled"`
}

type GithubComKloudliteAPIAppsCommsTypesNotificationClusterParams struct {
	ClusterName string `json:"clusterName"`
}

type GithubComKloudliteAPIAppsCommsTypesNotificationEnvParams struct {
	EnvName string `json:"envName"`
}

type Mutation struct {
}

type NotificationEdge struct {
	Cursor string              `json:"cursor"`
	Node   *types.Notification `json:"node"`
}

type NotificationPaginatedRecords struct {
	Edges      []*NotificationEdge `json:"edges"`
	PageInfo   *PageInfo           `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     *bool   `json:"hasNextPage,omitempty"`
	HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
	StartCursor     *string `json:"startCursor,omitempty"`
}

type Query struct {
}

type GithubComKloudliteAPIAppsCommsTypesNotificationResourceType string

const (
	GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeAccount     GithubComKloudliteAPIAppsCommsTypesNotificationResourceType = "account"
	GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeCluster     GithubComKloudliteAPIAppsCommsTypesNotificationResourceType = "cluster"
	GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeEnvironment GithubComKloudliteAPIAppsCommsTypesNotificationResourceType = "environment"
)

var AllGithubComKloudliteAPIAppsCommsTypesNotificationResourceType = []GithubComKloudliteAPIAppsCommsTypesNotificationResourceType{
	GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeAccount,
	GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeCluster,
	GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeEnvironment,
}

func (e GithubComKloudliteAPIAppsCommsTypesNotificationResourceType) IsValid() bool {
	switch e {
	case GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeAccount, GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeCluster, GithubComKloudliteAPIAppsCommsTypesNotificationResourceTypeEnvironment:
		return true
	}
	return false
}

func (e GithubComKloudliteAPIAppsCommsTypesNotificationResourceType) String() string {
	return string(e)
}

func (e *GithubComKloudliteAPIAppsCommsTypesNotificationResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteAPIAppsCommsTypesNotificationResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___api___apps___comms___types__NotificationResourceType", str)
	}
	return nil
}

func (e GithubComKloudliteAPIAppsCommsTypesNotificationResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteAPIAppsCommsTypesNotificationType string

const (
	GithubComKloudliteAPIAppsCommsTypesNotificationTypeAlert        GithubComKloudliteAPIAppsCommsTypesNotificationType = "alert"
	GithubComKloudliteAPIAppsCommsTypesNotificationTypeNotification GithubComKloudliteAPIAppsCommsTypesNotificationType = "notification"
)

var AllGithubComKloudliteAPIAppsCommsTypesNotificationType = []GithubComKloudliteAPIAppsCommsTypesNotificationType{
	GithubComKloudliteAPIAppsCommsTypesNotificationTypeAlert,
	GithubComKloudliteAPIAppsCommsTypesNotificationTypeNotification,
}

func (e GithubComKloudliteAPIAppsCommsTypesNotificationType) IsValid() bool {
	switch e {
	case GithubComKloudliteAPIAppsCommsTypesNotificationTypeAlert, GithubComKloudliteAPIAppsCommsTypesNotificationTypeNotification:
		return true
	}
	return false
}

func (e GithubComKloudliteAPIAppsCommsTypesNotificationType) String() string {
	return string(e)
}

func (e *GithubComKloudliteAPIAppsCommsTypesNotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteAPIAppsCommsTypesNotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___api___apps___comms___types__NotificationType", str)
	}
	return nil
}

func (e GithubComKloudliteAPIAppsCommsTypesNotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
