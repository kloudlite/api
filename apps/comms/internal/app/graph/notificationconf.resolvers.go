package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"

	"github.com/kloudlite/api/apps/comms/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/comms/internal/app/graph/model"
	"github.com/kloudlite/api/apps/comms/internal/domain/entities"
	fn "github.com/kloudlite/api/pkg/functions"
)

// CreationTime is the resolver for the creationTime field.
func (r *notificationConfResolver) CreationTime(ctx context.Context, obj *entities.NotificationConf) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}

	return obj.CreationTime.Format(time.RFC3339), nil
}

// EmailConfigurations is the resolver for the emailConfigurations field.
func (r *notificationConfResolver) EmailConfigurations(ctx context.Context, obj *entities.NotificationConf) (*model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesEmailConfig, error) {
	if obj == nil {
		return nil, fmt.Errorf("obj is nil")
	}

	return fn.JsonConvertP[model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesEmailConfig](obj.EmailConfiguration)
}

// SlackConfigurations is the resolver for the slackConfigurations field.
func (r *notificationConfResolver) SlackConfigurations(ctx context.Context, obj *entities.NotificationConf) (*model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesSlackConfig, error) {
	if obj == nil {
		return nil, fmt.Errorf("obj is nil")
	}

	return fn.JsonConvertP[model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesSlackConfig](obj.SlackConfiguration)
}

// TelegramConfigurations is the resolver for the telegramConfigurations field.
func (r *notificationConfResolver) TelegramConfigurations(ctx context.Context, obj *entities.NotificationConf) (*model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesTelegramConfig, error) {
	if obj == nil {
		return nil, fmt.Errorf("obj is nil")
	}

	return fn.JsonConvertP[model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesTelegramConfig](obj.TelegramConfiguration)
}

// UpdateTime is the resolver for the updateTime field.
func (r *notificationConfResolver) UpdateTime(ctx context.Context, obj *entities.NotificationConf) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}

	return obj.UpdateTime.Format(time.RFC3339), nil
}

// EmailConfigurations is the resolver for the emailConfigurations field.
func (r *notificationConfInResolver) EmailConfigurations(ctx context.Context, obj *entities.NotificationConf, data *model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesEmailConfigIn) error {
	if obj == nil {
		return fmt.Errorf("obj is nil")
	}

	gckacideeci, err := fn.JsonConvertP[entities.EmailConfig](data)
	if err != nil {
		return err
	}

	obj.EmailConfiguration = gckacideeci

	return nil
}

// SlackConfigurations is the resolver for the slackConfigurations field.
func (r *notificationConfInResolver) SlackConfigurations(ctx context.Context, obj *entities.NotificationConf, data *model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesSlackConfigIn) error {
	if obj == nil {
		return fmt.Errorf("obj is nil")
	}

	gckacideesci, err := fn.JsonConvertP[entities.SlackConfig](data)
	if err != nil {
		return err
	}

	obj.SlackConfiguration = gckacideesci
	return nil
}

// TelegramConfigurations is the resolver for the telegramConfigurations field.
func (r *notificationConfInResolver) TelegramConfigurations(ctx context.Context, obj *entities.NotificationConf, data *model.GithubComKloudliteAPIAppsCommsInternalDomainEntitiesTelegramConfigIn) error {
	if obj == nil {
		return fmt.Errorf("obj is nil")
	}

	gckacideetci, err := fn.JsonConvertP[entities.TelegramConfig](data)
	if err != nil {
		return err
	}

	obj.TelegramConfiguration = gckacideetci

	return nil
}

// NotificationConf returns generated.NotificationConfResolver implementation.
func (r *Resolver) NotificationConf() generated.NotificationConfResolver {
	return &notificationConfResolver{r}
}

// NotificationConfIn returns generated.NotificationConfInResolver implementation.
func (r *Resolver) NotificationConfIn() generated.NotificationConfInResolver {
	return &notificationConfInResolver{r}
}

type notificationConfResolver struct{ *Resolver }
type notificationConfInResolver struct{ *Resolver }
