package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"

	"kloudlite.io/apps/dns/internal/app/graph/generated"
	"kloudlite.io/apps/dns/internal/app/graph/model"
	"kloudlite.io/pkg/repos"
)

// Sites is the resolver for the sites field.
func (r *accountResolver) Sites(ctx context.Context, obj *model.Account) ([]*model.Site, error) {
	sitesEntities, err := r.d.GetSites(ctx, string(obj.Name))
	if err != nil {
		return nil, err
	}
	sites := make([]*model.Site, 0)
	for _, e := range sitesEntities {
		edgeCname, err := r.d.GetAccountEdgeCName(ctx, string(e.AccountName), e.RegionId)
		if err != nil {
			edgeCname = ""
		}
		sites = append(sites, &model.Site{
			ID:          e.Id,
			RegionID:    e.RegionId,
			AccountName: e.AccountName,
			IsVerified:  e.Verified,
			Domain:      e.Domain,
			EdgeCname:   edgeCname,
		})
	}
	return sites, nil
}

// DNSCreateSite is the resolver for the dns_createSite field.
func (r *mutationResolver) DNSCreateSite(ctx context.Context, domain string, accountName string, regionID repos.ID) (bool, error) {
	err := r.d.CreateSite(ctx, domain, accountName, regionID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DNSDeleteSite is the resolver for the dns_deleteSite field.
func (r *mutationResolver) DNSDeleteSite(ctx context.Context, siteID repos.ID) (bool, error) {
	err := r.d.DeleteSite(ctx, siteID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DNSVerifySite is the resolver for the dns_VerifySite field.
func (r *mutationResolver) DNSVerifySite(ctx context.Context, siteID repos.ID) (bool, error) {
	err := r.d.VerifySite(ctx, siteID)
	return err == nil, err
}

// DNSGetSite is the resolver for the dns_getSite field.
func (r *queryResolver) DNSGetSite(ctx context.Context, siteID repos.ID) (*model.Site, error) {
	site, err := r.d.GetSite(ctx, string(siteID))
	if err != nil {
		return nil, err
	}
	edgeCname, err := r.d.GetAccountEdgeCName(ctx, string(site.AccountName), site.RegionId)
	if err != nil {
		return nil, err
	}

	return &model.Site{
		ID:          site.Id,
		RegionID:    site.RegionId,
		AccountName: site.AccountName,
		IsVerified:  site.Verified,
		Domain:      site.Domain,
		EdgeCname:   edgeCname,
	}, nil
}

// Account returns generated.AccountResolver implementation.
func (r *Resolver) Account() generated.AccountResolver { return &accountResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type accountResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
