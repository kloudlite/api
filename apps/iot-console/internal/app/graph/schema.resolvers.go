package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"github.com/kloudlite/api/apps/iot-console/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/iot-console/internal/app/graph/model"
	"github.com/kloudlite/api/apps/iot-console/internal/domain"
	"github.com/kloudlite/api/apps/iot-console/internal/entities"
	"github.com/kloudlite/api/pkg/errors"
	fn "github.com/kloudlite/api/pkg/functions"
	"github.com/kloudlite/api/pkg/repos"
)

// IotCreateProject is the resolver for the iot_createProject field.
func (r *mutationResolver) IotCreateProject(ctx context.Context, project entities.IOTProject) (*entities.IOTProject, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.CreateProject(ic, project)
}

// IotUpdateProject is the resolver for the iot_updateProject field.
func (r *mutationResolver) IotUpdateProject(ctx context.Context, project entities.IOTProject) (*entities.IOTProject, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.UpdateProject(ic, project)
}

// IotDeleteProject is the resolver for the iot_deleteProject field.
func (r *mutationResolver) IotDeleteProject(ctx context.Context, name string) (bool, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return false, errors.NewE(err)
	}
	if err := r.Domain.DeleteProject(ic, name); err != nil {
		return false, errors.NewE(err)
	}
	return true, nil
}

// IotCreateDevice is the resolver for the iot_createDevice field.
func (r *mutationResolver) IotCreateDevice(ctx context.Context, projectName string, deploymentName string, device entities.IOTDevice) (*entities.IOTDevice, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.CreateDevice(newIOTResourceContext(ic, projectName), deploymentName, device)
}

// IotUpdateDevice is the resolver for the iot_updateDevice field.
func (r *mutationResolver) IotUpdateDevice(ctx context.Context, projectName string, deploymentName string, device entities.IOTDevice) (*entities.IOTDevice, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.UpdateDevice(newIOTResourceContext(ic, projectName), deploymentName, device)
}

// IotDeleteDevice is the resolver for the iot_deleteDevice field.
func (r *mutationResolver) IotDeleteDevice(ctx context.Context, projectName string, deploymentName string, name string) (bool, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return false, errors.NewE(err)
	}
	if err := r.Domain.DeleteDevice(newIOTResourceContext(ic, projectName), deploymentName, name); err != nil {
		return false, errors.NewE(err)
	}
	return true, nil
}

// IotCreateDeviceBlueprint is the resolver for the iot_createDeviceBlueprint field.
func (r *mutationResolver) IotCreateDeviceBlueprint(ctx context.Context, projectName string, deviceBlueprint entities.IOTDeviceBlueprint) (*entities.IOTDeviceBlueprint, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.CreateDeviceBlueprint(newIOTResourceContext(ic, projectName), deviceBlueprint)
}

// IotUpdateDeviceBlueprint is the resolver for the iot_updateDeviceBlueprint field.
func (r *mutationResolver) IotUpdateDeviceBlueprint(ctx context.Context, projectName string, deviceBlueprint entities.IOTDeviceBlueprint) (*entities.IOTDeviceBlueprint, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.UpdateDeviceBlueprint(newIOTResourceContext(ic, projectName), deviceBlueprint)
}

// IotDeleteDeviceBlueprint is the resolver for the iot_deleteDeviceBlueprint field.
func (r *mutationResolver) IotDeleteDeviceBlueprint(ctx context.Context, projectName string, name string) (bool, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return false, errors.NewE(err)
	}
	if err := r.Domain.DeleteDeviceBlueprint(newIOTResourceContext(ic, projectName), name); err != nil {
		return false, errors.NewE(err)
	}
	return true, nil
}

// IotCreateDeployment is the resolver for the iot_createDeployment field.
func (r *mutationResolver) IotCreateDeployment(ctx context.Context, projectName string, deployment entities.IOTDeployment) (*entities.IOTDeployment, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.CreateDeployment(newIOTResourceContext(ic, projectName), deployment)
}

// IotUpdateDeployment is the resolver for the iot_updateDeployment field.
func (r *mutationResolver) IotUpdateDeployment(ctx context.Context, projectName string, deployment entities.IOTDeployment) (*entities.IOTDeployment, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.UpdateDeployment(newIOTResourceContext(ic, projectName), deployment)
}

// IotDeleteDeployment is the resolver for the iot_deleteDeployment field.
func (r *mutationResolver) IotDeleteDeployment(ctx context.Context, projectName string, name string) (bool, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return false, errors.NewE(err)
	}
	if err := r.Domain.DeleteDeployment(newIOTResourceContext(ic, projectName), name); err != nil {
		return false, errors.NewE(err)
	}
	return true, nil
}

// IotCheckNameAvailability is the resolver for the iot_checkNameAvailability field.
func (r *queryResolver) IotCheckNameAvailability(ctx context.Context, projectName string, deviceBlueprintName *string, deploymentName *string, resType domain.ResourceType, name string) (*domain.CheckNameAvailabilityOutput, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.CheckNameAvailability(newIOTResourceContext(ic, projectName), deviceBlueprintName, deploymentName, resType, name)
}

// IotListProjects is the resolver for the iot_listProjects field.
func (r *queryResolver) IotListProjects(ctx context.Context, search *model.SearchIOTProjects, pq *repos.CursorPagination) (*model.IOTProjectPaginatedRecords, error) {
	filter := map[string]repos.MatchFilter{}
	if search != nil {
		if search.Text != nil {
			filter["name"] = *search.Text
		}
	}
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}

	e, err := r.Domain.ListProjects(ic, filter, fn.DefaultIfNil(pq, repos.DefaultCursorPagination))
	if err != nil {
		return nil, errors.NewE(err)
	}

	return fn.JsonConvertP[model.IOTProjectPaginatedRecords](e)
}

// IotGetProject is the resolver for the iot_getProject field.
func (r *queryResolver) IotGetProject(ctx context.Context, name string) (*entities.IOTProject, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.GetProject(ic, name)
}

// IotListDevices is the resolver for the iot_listDevices field.
func (r *queryResolver) IotListDevices(ctx context.Context, projectName string, deploymentName string, search *model.SearchIOTDevices, pq *repos.CursorPagination) (*model.IOTDevicePaginatedRecords, error) {
	filter := map[string]repos.MatchFilter{}
	if search != nil {
		if search.Text != nil {
			filter["name"] = *search.Text
		}
	}
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}

	d, err := r.Domain.ListDevices(newIOTResourceContext(ic, projectName), deploymentName, filter, fn.DefaultIfNil(pq, repos.DefaultCursorPagination))
	if err != nil {
		return nil, errors.NewE(err)
	}

	return fn.JsonConvertP[model.IOTDevicePaginatedRecords](d)
}

// IotGetDevice is the resolver for the iot_getDevice field.
func (r *queryResolver) IotGetDevice(ctx context.Context, projectName string, deploymentName string, name string) (*entities.IOTDevice, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.GetDevice(newIOTResourceContext(ic, projectName), name, deploymentName)
}

// IotListDeviceBlueprints is the resolver for the iot_listDeviceBlueprints field.
func (r *queryResolver) IotListDeviceBlueprints(ctx context.Context, projectName string, search *model.SearchIOTDeviceBlueprints, pq *repos.CursorPagination) (*model.IOTDeviceBlueprintPaginatedRecords, error) {
	filter := map[string]repos.MatchFilter{}
	if search != nil {
		if search.Text != nil {
			filter["name"] = *search.Text
		}
	}
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}

	e, err := r.Domain.ListDeviceBlueprints(newIOTResourceContext(ic, projectName), filter, fn.DefaultIfNil(pq, repos.DefaultCursorPagination))
	if err != nil {
		return nil, errors.NewE(err)
	}

	return fn.JsonConvertP[model.IOTDeviceBlueprintPaginatedRecords](e)
}

// IotGetDeviceBlueprint is the resolver for the iot_getDeviceBlueprint field.
func (r *queryResolver) IotGetDeviceBlueprint(ctx context.Context, projectName string, name string) (*entities.IOTDeviceBlueprint, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.GetDeviceBlueprint(newIOTResourceContext(ic, projectName), name)
}

// IotListDeployments is the resolver for the iot_listDeployments field.
func (r *queryResolver) IotListDeployments(ctx context.Context, projectName string, search *model.SearchIOTDeployments, pq *repos.CursorPagination) (*model.IOTDeploymentPaginatedRecords, error) {
	filter := map[string]repos.MatchFilter{}
	if search != nil {
		if search.Text != nil {
			filter["name"] = *search.Text
		}
	}
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}

	d, err := r.Domain.ListDeployments(newIOTResourceContext(ic, projectName), filter, fn.DefaultIfNil(pq, repos.DefaultCursorPagination))
	if err != nil {
		return nil, errors.NewE(err)
	}

	return fn.JsonConvertP[model.IOTDeploymentPaginatedRecords](d)
}

// IotGetDeployment is the resolver for the iot_getDeployment field.
func (r *queryResolver) IotGetDeployment(ctx context.Context, projectName string, name string) (*entities.IOTDeployment, error) {
	ic, err := toIOTConsoleContext(ctx)
	if err != nil {
		return nil, errors.NewE(err)
	}
	return r.Domain.GetDeployment(newIOTResourceContext(ic, projectName), name)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
