package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"

	"kloudlite.io/apps/console/internal/app/graph/generated"
	"kloudlite.io/apps/console/internal/domain"
	"kloudlite.io/apps/console/internal/domain/entities"
)

// CoreCreateProject is the resolver for the core_createProject field.
func (r *mutationResolver) CoreCreateProject(ctx context.Context, project entities.Project) (*entities.Project, error) {
	panic(fmt.Errorf("not implemented: CoreCreateProject - core_createProject"))
}

// CoreUpdateProject is the resolver for the core_updateProject field.
func (r *mutationResolver) CoreUpdateProject(ctx context.Context, project entities.Project) (*entities.Project, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateProject - core_updateProject"))
}

// CoreDeleteProject is the resolver for the core_deleteProject field.
func (r *mutationResolver) CoreDeleteProject(ctx context.Context, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteProject - core_deleteProject"))
}

// CoreCreateWorkspace is the resolver for the core_createWorkspace field.
func (r *mutationResolver) CoreCreateWorkspace(ctx context.Context, env entities.Workspace) (*entities.Workspace, error) {
	panic(fmt.Errorf("not implemented: CoreCreateWorkspace - core_createWorkspace"))
}

// CoreUpdateWorkspace is the resolver for the core_updateWorkspace field.
func (r *mutationResolver) CoreUpdateWorkspace(ctx context.Context, env entities.Workspace) (*entities.Workspace, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateWorkspace - core_updateWorkspace"))
}

// CoreDeleteWorkspace is the resolver for the core_deleteWorkspace field.
func (r *mutationResolver) CoreDeleteWorkspace(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteWorkspace - core_deleteWorkspace"))
}

// CoreCreateApp is the resolver for the core_createApp field.
func (r *mutationResolver) CoreCreateApp(ctx context.Context, app entities.App) (*entities.App, error) {
	panic(fmt.Errorf("not implemented: CoreCreateApp - core_createApp"))
}

// CoreUpdateApp is the resolver for the core_updateApp field.
func (r *mutationResolver) CoreUpdateApp(ctx context.Context, app entities.App) (*entities.App, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateApp - core_updateApp"))
}

// CoreDeleteApp is the resolver for the core_deleteApp field.
func (r *mutationResolver) CoreDeleteApp(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteApp - core_deleteApp"))
}

// CoreCreateConfig is the resolver for the core_createConfig field.
func (r *mutationResolver) CoreCreateConfig(ctx context.Context, config entities.Config) (*entities.Config, error) {
	panic(fmt.Errorf("not implemented: CoreCreateConfig - core_createConfig"))
}

// CoreUpdateConfig is the resolver for the core_updateConfig field.
func (r *mutationResolver) CoreUpdateConfig(ctx context.Context, config entities.Config) (*entities.Config, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateConfig - core_updateConfig"))
}

// CoreDeleteConfig is the resolver for the core_deleteConfig field.
func (r *mutationResolver) CoreDeleteConfig(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteConfig - core_deleteConfig"))
}

// CoreCreateSecret is the resolver for the core_createSecret field.
func (r *mutationResolver) CoreCreateSecret(ctx context.Context, secret entities.Secret) (*entities.Secret, error) {
	panic(fmt.Errorf("not implemented: CoreCreateSecret - core_createSecret"))
}

// CoreUpdateSecret is the resolver for the core_updateSecret field.
func (r *mutationResolver) CoreUpdateSecret(ctx context.Context, secret entities.Secret) (*entities.Secret, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateSecret - core_updateSecret"))
}

// CoreDeleteSecret is the resolver for the core_deleteSecret field.
func (r *mutationResolver) CoreDeleteSecret(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteSecret - core_deleteSecret"))
}

// CoreCreateRouter is the resolver for the core_createRouter field.
func (r *mutationResolver) CoreCreateRouter(ctx context.Context, router entities.Router) (*entities.Router, error) {
	panic(fmt.Errorf("not implemented: CoreCreateRouter - core_createRouter"))
}

// CoreUpdateRouter is the resolver for the core_updateRouter field.
func (r *mutationResolver) CoreUpdateRouter(ctx context.Context, router entities.Router) (*entities.Router, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateRouter - core_updateRouter"))
}

// CoreDeleteRouter is the resolver for the core_deleteRouter field.
func (r *mutationResolver) CoreDeleteRouter(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteRouter - core_deleteRouter"))
}

// CoreCreateManagedService is the resolver for the core_createManagedService field.
func (r *mutationResolver) CoreCreateManagedService(ctx context.Context, msvc entities.ManagedService) (*entities.ManagedService, error) {
	panic(fmt.Errorf("not implemented: CoreCreateManagedService - core_createManagedService"))
}

// CoreUpdateManagedService is the resolver for the core_updateManagedService field.
func (r *mutationResolver) CoreUpdateManagedService(ctx context.Context, msvc entities.ManagedService) (*entities.ManagedService, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateManagedService - core_updateManagedService"))
}

// CoreDeleteManagedService is the resolver for the core_deleteManagedService field.
func (r *mutationResolver) CoreDeleteManagedService(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteManagedService - core_deleteManagedService"))
}

// CoreCreateManagedResource is the resolver for the core_createManagedResource field.
func (r *mutationResolver) CoreCreateManagedResource(ctx context.Context, mres entities.ManagedResource) (*entities.ManagedResource, error) {
	panic(fmt.Errorf("not implemented: CoreCreateManagedResource - core_createManagedResource"))
}

// CoreUpdateManagedResource is the resolver for the core_updateManagedResource field.
func (r *mutationResolver) CoreUpdateManagedResource(ctx context.Context, mres entities.ManagedResource) (*entities.ManagedResource, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateManagedResource - core_updateManagedResource"))
}

// CoreDeleteManagedResource is the resolver for the core_deleteManagedResource field.
func (r *mutationResolver) CoreDeleteManagedResource(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreDeleteManagedResource - core_deleteManagedResource"))
}

// CoreCheckNameAvailability is the resolver for the core_checkNameAvailability field.
func (r *queryResolver) CoreCheckNameAvailability(ctx context.Context, resType domain.ResType, name string) (*domain.CheckNameAvailabilityOutput, error) {
	panic(fmt.Errorf("not implemented: CoreCheckNameAvailability - core_checkNameAvailability"))
}

// CoreListProjects is the resolver for the core_listProjects field.
func (r *queryResolver) CoreListProjects(ctx context.Context, clusterName *string) ([]*entities.Project, error) {
	panic(fmt.Errorf("not implemented: CoreListProjects - core_listProjects"))
}

// CoreGetProject is the resolver for the core_getProject field.
func (r *queryResolver) CoreGetProject(ctx context.Context, name string) (*entities.Project, error) {
	panic(fmt.Errorf("not implemented: CoreGetProject - core_getProject"))
}

// CoreResyncProject is the resolver for the core_resyncProject field.
func (r *queryResolver) CoreResyncProject(ctx context.Context, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncProject - core_resyncProject"))
}

// CoreListWorkspaces is the resolver for the core_listWorkspaces field.
func (r *queryResolver) CoreListWorkspaces(ctx context.Context, namespace string) ([]*entities.Workspace, error) {
	panic(fmt.Errorf("not implemented: CoreListWorkspaces - core_listWorkspaces"))
}

// CoreGetWorkspace is the resolver for the core_getWorkspace field.
func (r *queryResolver) CoreGetWorkspace(ctx context.Context, namespace string, name string) (*entities.Workspace, error) {
	panic(fmt.Errorf("not implemented: CoreGetWorkspace - core_getWorkspace"))
}

// CoreResyncWorkspace is the resolver for the core_resyncWorkspace field.
func (r *queryResolver) CoreResyncWorkspace(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncWorkspace - core_resyncWorkspace"))
}

// CoreListApps is the resolver for the core_listApps field.
func (r *queryResolver) CoreListApps(ctx context.Context, namespace string) ([]*entities.App, error) {
	panic(fmt.Errorf("not implemented: CoreListApps - core_listApps"))
}

// CoreGetApp is the resolver for the core_getApp field.
func (r *queryResolver) CoreGetApp(ctx context.Context, namespace string, name string) (*entities.App, error) {
	panic(fmt.Errorf("not implemented: CoreGetApp - core_getApp"))
}

// CoreResyncApp is the resolver for the core_resyncApp field.
func (r *queryResolver) CoreResyncApp(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncApp - core_resyncApp"))
}

// CoreListConfigs is the resolver for the core_listConfigs field.
func (r *queryResolver) CoreListConfigs(ctx context.Context, namespace string) ([]*entities.Config, error) {
	panic(fmt.Errorf("not implemented: CoreListConfigs - core_listConfigs"))
}

// CoreGetConfig is the resolver for the core_getConfig field.
func (r *queryResolver) CoreGetConfig(ctx context.Context, namespace string, name string) (*entities.Config, error) {
	panic(fmt.Errorf("not implemented: CoreGetConfig - core_getConfig"))
}

// CoreResyncConfig is the resolver for the core_resyncConfig field.
func (r *queryResolver) CoreResyncConfig(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncConfig - core_resyncConfig"))
}

// CoreListSecrets is the resolver for the core_listSecrets field.
func (r *queryResolver) CoreListSecrets(ctx context.Context, namespace string) ([]*entities.Secret, error) {
	panic(fmt.Errorf("not implemented: CoreListSecrets - core_listSecrets"))
}

// CoreGetSecret is the resolver for the core_getSecret field.
func (r *queryResolver) CoreGetSecret(ctx context.Context, namespace string, name string) (*entities.Secret, error) {
	panic(fmt.Errorf("not implemented: CoreGetSecret - core_getSecret"))
}

// CoreResyncSecret is the resolver for the core_resyncSecret field.
func (r *queryResolver) CoreResyncSecret(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncSecret - core_resyncSecret"))
}

// CoreListRouters is the resolver for the core_listRouters field.
func (r *queryResolver) CoreListRouters(ctx context.Context, namespace string) ([]*entities.Router, error) {
	panic(fmt.Errorf("not implemented: CoreListRouters - core_listRouters"))
}

// CoreGetRouter is the resolver for the core_getRouter field.
func (r *queryResolver) CoreGetRouter(ctx context.Context, namespace string, name string) (*entities.Router, error) {
	panic(fmt.Errorf("not implemented: CoreGetRouter - core_getRouter"))
}

// CoreResyncRouter is the resolver for the core_resyncRouter field.
func (r *queryResolver) CoreResyncRouter(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncRouter - core_resyncRouter"))
}

// CoreListManagedServiceTemplates is the resolver for the core_listManagedServiceTemplates field.
func (r *queryResolver) CoreListManagedServiceTemplates(ctx context.Context) (interface{}, error) {
	panic(fmt.Errorf("not implemented: CoreListManagedServiceTemplates - core_listManagedServiceTemplates"))
}

// CoreGetManagedServiceTemplate is the resolver for the core_getManagedServiceTemplate field.
func (r *queryResolver) CoreGetManagedServiceTemplate(ctx context.Context, category string, name string) (interface{}, error) {
	panic(fmt.Errorf("not implemented: CoreGetManagedServiceTemplate - core_getManagedServiceTemplate"))
}

// CoreListManagedServices is the resolver for the core_listManagedServices field.
func (r *queryResolver) CoreListManagedServices(ctx context.Context, namespace string) ([]*entities.ManagedService, error) {
	panic(fmt.Errorf("not implemented: CoreListManagedServices - core_listManagedServices"))
}

// CoreGetManagedService is the resolver for the core_getManagedService field.
func (r *queryResolver) CoreGetManagedService(ctx context.Context, namespace string, name string) (*entities.ManagedService, error) {
	panic(fmt.Errorf("not implemented: CoreGetManagedService - core_getManagedService"))
}

// CoreResyncManagedService is the resolver for the core_resyncManagedService field.
func (r *queryResolver) CoreResyncManagedService(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncManagedService - core_resyncManagedService"))
}

// CoreListManagedResources is the resolver for the core_listManagedResources field.
func (r *queryResolver) CoreListManagedResources(ctx context.Context, namespace string) ([]*entities.ManagedResource, error) {
	panic(fmt.Errorf("not implemented: CoreListManagedResources - core_listManagedResources"))
}

// CoreGetManagedResource is the resolver for the core_getManagedResource field.
func (r *queryResolver) CoreGetManagedResource(ctx context.Context, namespace string, name string) (*entities.ManagedResource, error) {
	panic(fmt.Errorf("not implemented: CoreGetManagedResource - core_getManagedResource"))
}

// CoreResyncManagedResource is the resolver for the core_resyncManagedResource field.
func (r *queryResolver) CoreResyncManagedResource(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: CoreResyncManagedResource - core_resyncManagedResource"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
