type Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverrides {
  applied: Boolean
  patches: [Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverridesPatches]
}

type Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverridesPatches {
  op: String!
  path: String!
  value: Any
}

type Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpec {
  inputs: Map
  msvcKind: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecMsvcKind!
  nodeSelector: Map
  region: String
  tolerations: [Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecTolerations]
}

type Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecMsvcKind {
  apiVersion: String!
  kind: String
}

type Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecTolerations {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}

type Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatus {
  checks: Map
  isReady: Boolean
  lastReconcileTime: String
  message: Map
  resources: [Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatusResources]
}

type Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatusResources {
  apiVersion: String
  kind: String
  name: String!
  namespace: String!
}

type MSvc {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  enabled: Boolean
  kind: String!
  metadata: Metadata! @goField(name: "objectMeta")
  overrides: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverrides
  spec: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpec
  status: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatus
  syncStatus: Kloudlite_io__pkg__types_SyncStatus
}

input Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverridesIn {
  applied: Boolean
  patches: [Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverridesPatchesIn]
}

input Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverridesPatchesIn {
  op: String!
  path: String!
  value: Any
}

input Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecIn {
  inputs: Map
  msvcKind: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecMsvcKindIn!
  nodeSelector: Map
  region: String
  tolerations: [Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecTolerationsIn]
}

input Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecMsvcKindIn {
  apiVersion: String!
  kind: String
}

input Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpecTolerationsIn {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}

input Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatusIn {
  checks: Map
  isReady: Boolean
  lastReconcileTime: String
  message: Map
  resources: [Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatusResourcesIn]
}

input Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatusResourcesIn {
  apiVersion: String
  kind: String
  name: String!
  namespace: String!
}

input MSvcIn {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  enabled: Boolean
  kind: String!
  metadata: Metadata! @goField(name: "objectMeta")
  overrides: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverrides
  overrides: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceOverridesIn
  spec: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceSpec
  status: Github_com__kloudlite__operator__apis__crds__v1_ManagedServiceStatus
  syncStatus: Kloudlite_io__pkg__types_SyncStatusIn
}

